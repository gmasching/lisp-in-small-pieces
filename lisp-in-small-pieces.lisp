(in-package #:lisp)

(defun %eval (form env)
  (if (atom form)
      (cond ((symbolp form)
	     (lookup form env))
	    ((or (numberp form)
		 (stringp form)
		 (characterp form)
		 (vectorp form))
	     form))
      (case (car form)
	(quote (car (cdr form)))
	(if (if (%eval (car (cdr form))
		       env)
		(%eval (car (cdr (cdr form)))
		       env)
		(%eval (car (cdr (cdr (cdr form))))
		       env)))
	(progn (evaluate-progn (cdr form)
			       env))
	(setq (update! (car (cdr form))
		       env
		       (%eval (car (cdr (cdr form)))
			      env)))
	(lambda (make-function
		 (car (cdr form))
		 (cdr (cdr form))
		 env))
	(otherwise (%apply (%eval (car form) env)
			   (evlis (cdr form) env))))))

(defun evlis (params env)
  (if params
      (cons (%eval (car params) env)
	    (evlis (cdr params) env))
      nil))

(defun lookup (form env))
(defun make-function (parameters body env))
(defun update! (var env value))
(defun %apply (function args))
(defun evaluate-progn (body env)
  (let ((last-value (%eval (car body) env)))
    (if (cdr body)
	(evaluate-progn (cdr body) env)
	last-value)))
