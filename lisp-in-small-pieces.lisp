(in-package #:lisp)

(defparameter *the-false-value* nil)
(defun truep (value)
  (not (eq *the-false-value* value)))
(defun booleanp (value)
  (or (eq *the-false-value* value)
      (eq t value)))
(defun %eval (form env)
  (if (atom form)
      (cond ((symbolp form)
	     (lookup form env))
	    ((or (numberp form)
		 (stringp form)
		 (characterp form)
		 (vectorp form)
		 (booleanp form))
	     form))
      (case (car form)
	(quote (car (cdr form)))
	(if (if (truep (%eval (car (cdr form))
			      env))
		(%eval (car (cdr (cdr form)))
		       env)
		(%eval (car (cdr (cdr (cdr form))))
		       env)))
	(progn (evaluate-progn (cdr form)
			       env))
	(setq (update! (car (cdr form))
		       env
		       (%eval (car (cdr (cdr form)))
			      env)))
	(lambda (make-function
		 (car (cdr form))
		 (cdr (cdr form))
		 env))
	(otherwise (%apply (%eval (car form) env)
			   (evlis (cdr form) env))))))

(defun evlis (params env)
  (if (consp params)
      (let ((arg0 (%eval (car params) env)))
	(cons arg0
	      (evlis (cdr params) env)))
      nil))

(defun lookup (form env))
(defun make-function (parameters body env))
(defun update! (var env value))
(defun %apply (function args))
(defparameter *empty-progn* 69)
(defun evaluate-progn (body env)
  (if (consp body)
      (if (consp (cdr body))
	  (progn (%eval (car body)
			env)
		 (evaluate-progn (cdr body)
				 env))
	  (%eval (car body) env))
      *empty-progn*))

