(in-package :lisp)
;;;;values
(defparameter *the-false-value* nil)
(defun truep (value)
  (not (eq *the-false-value* value)))
(defun booleanp (value)
  (or (eq *the-false-value* value)
      (eq t value)))

(defparameter *empty-progn* 69)

;;;;environments
;;;;represented as alists where each cell is (symbol . value)
(defparameter *initial-environment* '())
(defun lookup (id env)
  (if (consp env)
      (if (eq (car (car env)) id)
	  (cdr (car env))
	  (lookup id (cdr env)))
      (error "no such binding ~s" id)))
(defun update! (id env value)
  (if (consp env)
      (if (eq (car (car env)) id)
	  (progn (rplacd (car env) value)
		 value)
	  (update! id (cdr env) value))
      (error "no such binding ~s" id)))
(defun extend (env variables values)
  (cond ((consp variables)
	 (if (consp values)
	     (cons (cons (car variables)
			 (car values))
		   (extend env
			   (cdr variables)
			   (cdr values)))
	     (error "too few values")))
	((null variables)
	 (if (null values)
	     env
	     (error "too many values")))
	((symbolp variables)
	 (cons (cons variables
		     values)
	       env))))
